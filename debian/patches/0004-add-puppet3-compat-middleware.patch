Author: Apollon Oikonomopoulos <apoikos@debian.org>
Description: Add Puppet 3 client compatibility under rack
 Add a Rack middleware re-implementing the v1 and v2 API calls, as
 per[1]. This should restore compatibility with Puppet 3 clients when
 run under any rack-enabled server (including Passenger).
Forwarded: no (deprecated upstream)
Last-Update: 2017-01-11
--- a/ext/rack/config.ru
+++ b/ext/rack/config.ru
@@ -25,6 +25,74 @@
 # delivered during catalog compilation.
 ARGV << "--no-always_retry_plugins"
 
+# Rack middleware for Puppet 3 compatibility
+# See Debian bug #832536
+class Puppet3Compat
+  attr_reader :master
+  @@puppet4_endpoints = ['puppet', 'puppet-ca']
+  @@v1_res_endpoints = ['catalog', 'file_bucket_file', 'file_content',
+                        'file_metadata', 'file_metadatas', 'report',
+                        'facts', 'node', 'resource_type', 'resource_types',
+                        'status']
+  @@v1_ca_endpoints = ['certificate', 'certificate_request',
+                       'certificate_status', 'certificate_statuses',
+                       'certificate_revocation_list']
+  @@v2_endpoints = ['environments']
+
+  def initialize(app)
+    @master = app
+  end
+
+  def call(env)
+    components = env["PATH_INFO"].to_s.split("/")
+
+    components.shift if components.first.empty?
+
+    if components.length < 2
+      return master.call(env)
+    end
+
+    environment = components.shift
+    @api = components.first
+
+    # Short-circuit Puppet 4 requests
+    if @@puppet4_endpoints.include?(environment)
+      return master.call(env)
+    end
+
+    @req = Rack::Request.new(env)
+
+    # Rewrite Puppet 3 requests
+    if @@v1_ca_endpoints.include?(@api)
+      @req.path_info = "/puppet-ca/v1/#{components.join("/")}"
+    elsif @@v1_res_endpoints.include?(@api) || @@v2_endpoints.include?(@api)
+      @req.path_info = "/puppet/v3/#{components.join("/")}"
+    end
+
+    if environment != "v2.0"
+      @req.update_param("environment", environment)
+
+      # Re-create the query string
+      env['QUERY_STRING'] = Rack::Utils.build_query(@req.params)
+    end
+
+    if @api =~ /^file_(content|bucket_file)/ && @req.get?
+      env["HTTP_ACCEPT"] = "binary"
+    elsif @api == "file_bucket_file" && (@req.post? || @req.put?)
+      env["CONTENT_TYPE"] = "application/octet-stream"
+    end
+
+    master.call(env).tap do |res|
+      if @api =~ /^file_(content|bucket_file)/ && @req.get?
+        # Always respond with text/plain to Puppet 3 clients.
+        res[1]["Content-Type"] = "text/plain"
+      end
+    end
+  end
+end
+
+use Puppet3Compat
+
 # NOTE: it's unfortunate that we have to use the "CommandLine" class
 #  here to launch the app, but it contains some initialization logic
 #  (such as triggering the parsing of the config file) that is very
